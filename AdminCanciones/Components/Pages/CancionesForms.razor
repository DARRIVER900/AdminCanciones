@page "/canciones/nueva"
@page "/canciones/editar/{id:int}"
@inject NavigationManager _navigationManager
@inject IRepositorioCanciones _repositorioCancion
@inject IRepositorioAlbums _repositorioAlbum
@inject IRepositorioPlaylists _repositorioPlaylist
@rendermode InteractiveServer

<PageTitle>Canciones</PageTitle>
<h3>@_mensaje Cancion</h3>

<EditForm Model="_cancion" FormName="frmCancion" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="txtTitulo" class="form-label">Titulo</label>
        <InputText @bind-Value="_cancion.Titulo" class="form-control" id="txtTitulo" />
        <ValidationMessage For="() =>_cancion.Titulo" />
    </div>
    <div class="mb-3">
        <label for="txtDuracion" class="form-label">Duracion</label>
        <InputText @bind-Value="_cancion.Duracion" class="form-control" id="txtDuracion" />
        <ValidationMessage For="() =>_cancion.Duracion" />
    </div>
        <div class="mb-3 row">
        <label for="txtAlbum" class="col-sm-2 col-form-label">Album</label>
        <div class="col-sm-10">
            <InputSelect class="form-select" id="txtAlbum" @bind-Value="_cancion.AlbumId">
                <option value="">Seleccione...</option>
                @foreach (var album in _albumes)
                {
                    <option value="@album.Id">@album.Titulo</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>_cancion.AlbumId" />
        </div>

        <div class="mb-3 row">
            <label for="txtPlaylists" class="col-sm-2 col-form-label">Playlists</label>
            <div class="col-sm-10">
                <select multiple class="form-select" id="txtPlaylists" @onchange="OnSelectionChanged">
                    @foreach (var playlist in _playlists)
                    {
                        <option value="@playlist.Id" selected="@_playlistsIdSeleccionados.Contains(playlist.Id)">
                            @playlist.Nombre
                        </option>
                    }
                </select>
            </div>
        </div>
</div>
    <div class="mb-3 row">
        <div class="col-sm-10 offset-sm-2">
            <button type="submit" class="btn btn-primary">Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Cancelar">Cancelar</button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public int id { get; set; }
    private Cancion _cancion = new();
    private string _mensaje = "Nueva";
    private List<Album> _albumes = new();
    private List<Playlist> _playlists = new();
    private List<int> _playlistsIdSeleccionados = new();

    protected override async Task OnInitializedAsync()
    {
        _albumes = await _repositorioAlbum.GetAll();
        _playlists = await _repositorioPlaylist.GetAll();
        if (id > 0)
        {
            _mensaje = "Modificar ";
            _cancion = await _repositorioCancion.Get(id);
            if (_cancion.Playlists != null && _cancion.Playlists.Count > 0)
            {
                _playlistsIdSeleccionados = _cancion.Playlists.Select(h => h.Id).ToList();
            }
        }
    }

    private void Cancelar()
    {
        _navigationManager.NavigateTo("/canciones");
    }
    private async Task Guardar()
    {
        if (_playlistsIdSeleccionados.Count > 0)
        {
            _cancion.Playlists = new List<Playlist>();
            foreach (var id in _playlistsIdSeleccionados)
            {
                var playlist = await _repositorioPlaylist.Get(id);
                _cancion.Playlists.Add(playlist);
            }
        }
        if (id > 0)
        {
            _cancion.Id = id;
            await _repositorioCancion.Update(_cancion);
        }
        else
        {
            await _repositorioCancion.Add(_cancion);
        }
        Cancelar();
    }
    private void OnSelectionChanged(ChangeEventArgs e)
    {
        var selectedOptions = (e.Value as IEnumerable<string>) ?? new[] { e.Value?.ToString() };
        _playlistsIdSeleccionados = selectedOptions
            .Where(id => int.TryParse(id, out _))
            .Select(int.Parse)
            .ToList();
    }

}
